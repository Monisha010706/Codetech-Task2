/*TASK TWO:  ONLINE BANKING SYSTEM

Create a comprehensive Java program for an online banking system. This system should
allow users to create accounts, deposit and withdraw funds, transfer money between
accounts, view transaction history, and manage personal information.*/

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class BankingSystem {

    private static class Account {
        private String accountNumber;
        private String accountHolder;
        private double balance;
        private List<String> transactionHistory;

        public Account(String accountNumber, String accountHolder) {
            this.accountNumber = accountNumber;
            this.accountHolder = accountHolder;
            this.balance = 0.0;
            this.transactionHistory = new ArrayList<>();
            addTransaction("Account created with initial balance: 0.0");
        }

        public String getAccountNumber() {
            return accountNumber;
        }

        public String getAccountHolder() {
            return accountHolder;
        }

        public double getBalance() {
            return balance;
        }

        public List<String> getTransactionHistory() {
            return transactionHistory;
        }

        public void deposit(double amount) {
            if (amount > 0) {
                balance += amount;
                addTransaction("Deposited: " + amount + ", New Balance: " + balance);
            } else {
                System.out.println("Deposit amount must be positive.");
            }
        }

        public boolean withdraw(double amount) {
            if (amount > 0 && amount <= balance) {
                balance -= amount;
                addTransaction("Withdrew: " + amount + ", New Balance: " + balance);
                return true;
            } else {
                System.out.println("Insufficient funds or invalid amount.");
                return false;
            }
        }

        public boolean transfer(Account target, double amount) {
            if (amount > 0 && amount <= balance) {
                this.balance -= amount;
                target.deposit(amount);
                addTransaction("Transferred: " + amount + " to Account: " + target.getAccountNumber() + ", New Balance: " + balance);
                return true;
            } else {
                System.out.println("Insufficient funds or invalid amount.");
                return false;
            }
        }

        private void addTransaction(String transaction) {
            transactionHistory.add(transaction);
        }

        public void printTransactionHistory() {
            System.out.println("Transaction History for Account " + accountNumber + ":");
            for (String transaction : transactionHistory) {
                System.out.println(transaction);
            }
        }

        public void updateAccountHolder(String newHolder) {
            this.accountHolder = newHolder;
            addTransaction("Account holder name updated to: " + newHolder);
        }
    }

    private static Map<String, Account> accounts = new HashMap<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("\nOnline Banking System");
            System.out.println("1. Create Account");
            System.out.println("2. Deposit Funds");
            System.out.println("3. Withdraw Funds");
            System.out.println("4. Transfer Money");
            System.out.println("5. View Transaction History");
            System.out.println("6. Manage Personal Information");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");
            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (option) {
                case 1:
                    createAccount();
                    break;
                case 2:
                    depositFunds();
                    break;
                case 3:
                    withdrawFunds();
                    break;
                case 4:
                    transferMoney();
                    break;
                case 5:
                    viewTransactionHistory();
                    break;
                case 6:
                    managePersonalInformation();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void createAccount() {
        System.out.print("Enter Account Number: ");
        String accountNumber = scanner.nextLine();
        System.out.print("Enter Account Holder Name: ");
        String accountHolder = scanner.nextLine();

        if (accounts.containsKey(accountNumber)) {
            System.out.println("Account with this number already exists.");
        } else {
            Account newAccount = new Account(accountNumber, accountHolder);
            accounts.put(accountNumber, newAccount);
            System.out.println("Account created successfully.");
        }
    }

    private static void depositFunds() {
        System.out.print("Enter Account Number: ");
        String accountNumber = scanner.nextLine();
        System.out.print("Enter Amount to Deposit: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume newline

        Account account = accounts.get(accountNumber);
        if (account != null) {
            account.deposit(amount);
            System.out.println("Deposited successfully.");
        } else {
            System.out.println("Account not found.");
        }
    }

    private static void withdrawFunds() {
        System.out.print("Enter Account Number: ");
        String accountNumber = scanner.nextLine();
        System.out.print("Enter Amount to Withdraw: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume newline

        Account account = accounts.get(accountNumber);
        if (account != null) {
            if (account.withdraw(amount)) {
                System.out.println("Withdrawn successfully.");
            }
        } else {
            System.out.println("Account not found.");
        }
    }

    private static void transferMoney() {
        System.out.print("Enter Source Account Number: ");
        String sourceAccountNumber = scanner.nextLine();
        System.out.print("Enter Target Account Number: ");
        String targetAccountNumber = scanner.nextLine();
        System.out.print("Enter Amount to Transfer: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume newline

        Account sourceAccount = accounts.get(sourceAccountNumber);
        Account targetAccount = accounts.get(targetAccountNumber);

        if (sourceAccount != null && targetAccount != null) {
            if (sourceAccount.transfer(targetAccount, amount)) {
                System.out.println("Transfer successful.");
            }
        } else {
            System.out.println("One or both accounts not found.");
        }
    }

    private static void viewTransactionHistory() {
        System.out.print("Enter Account Number: ");
        String accountNumber = scanner.nextLine();

        Account account = accounts.get(accountNumber);
        if (account != null) {
            account.printTransactionHistory();
        } else {
            System.out.println("Account not found.");
        }
    }

    private static void managePersonalInformation() {
        System.out.print("Enter Account Number: ");
        String accountNumber = scanner.nextLine();
        System.out.print("Enter New Account Holder Name: ");
        String newAccountHolder = scanner.nextLine();

        Account account = accounts.get(accountNumber);
        if (account != null) {
            account.updateAccountHolder(newAccountHolder);
            System.out.println("Personal information updated successfully.");
        } else {
            System.out.println("Account not found.");
        }
    }
}
